#Ejercicio 2.10
#a)
s = c("FFF", "FFN", "FNF", "FNN", "NFF", "NFN", "NNF", "NNN")
#b)
G <- c("FFF", "NFF", "FFN", "NFN")
#c)
G
#) P( A U B) = P(A) + P(B) - P(A y B)
P_A_o_B = 0.6 + 0.3 - 0.15
install.packages("knitr")
install.packages("kableExtra")
install.packages("e1071")
install.packages("pwr")
library(pwr)
shiny::runApp('C:/Users/Usuario/Downloads/shinyProjectGupo1 (2)/shinyProjectGupo1/shinyProjectGupo1/shiny')
runApp('C:/Users/Usuario/Downloads/shinyProjectGupo1 (2)/shinyProjectGupo1/shinyProjectGupo1/shiny')
<table>
<tr>
<th>y</th>
<th>x1</th>
<th>x2</th>
</tr>
<tr>
<td>6.40</td>
<td>1.32</td>
<th>1.15</th>
</tr>
<tr>
<td>15.05</td>
<td>2.69</td>
<th>3.40</th>
</tr>
<tr>
<td>18.75</td>
<td>3.56</td>
<th>4.10</th>
</tr>
<tr>
<td>30.25</td>
<td>4.41</td>
<th>8.75</th>
</tr>
<tr>
<td>44.85</td>
<td>5.35</td>
<th>14.82</th>
</tr>
<tr>
<td>48.94</td>
<td>6.20</td>
<th>15.15</th>
</tr>
<tr>
<td>51.55</td>
<td>7.12</td>
<th>15.32</th>
</tr>
<tr>
<td>61.50</td>
<td>8.87</td>
<th>18.18</th>
</tr>
<tr>
<td>10.44</td>
<td>9.80</td><th>x1</th>
</tr>
</table>
<br>
knitr::opts_chunk$set(echo = TRUE)
# Datos
n = 50
media_muestral = 85
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * (desviacion_estandar_poblacional / sqrt(n))
ic_inferior = media_muestral - margen_error
ic_superior = media_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 500
proporcion_muestral = 200 / 500
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral * (1 - proporcion_muestral)) / n)
ic_inferior = proporcion_muestral - margen_error
ic_superior = proporcion_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 20
varianza_muestral = 25
nivel_confianza = 0.95
# Valores chi-cuadrado para 95% de confianza
chi2_inferior = qchisq((1 - nivel_confianza) / 2, df = n - 1)
chi2_superior = qchisq(1 - (1 - nivel_confianza) / 2, df = n - 1)
# Intervalo de confianza
ic_inferior = (n - 1) * varianza_muestral / chi2_superior
ic_superior = (n - 1) * varianza_muestral / chi2_inferior
ic_inferior
ic_superior
# Datos
n1 = 30
n2 = 40
media_muestral1 = 85
media_muestral2 = 80
desviacion_estandar_poblacional1 = 10
desviacion_estandar_poblacional2 = 15
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((desviacion_estandar_poblacional1^2 / n1) + (desviacion_estandar_poblacional2^2 / n2))
diferencia_medias = media_muestral1 - media_muestral2
ic_inferior = diferencia_medias - margen_error
ic_superior = diferencia_medias + margen_error
ic_inferior
ic_superior
# Datos
n1 = 300
n2 = 400
proporcion_muestral1 = 120 / 300
proporcion_muestral2 = 150 / 400
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral1 * (1 - proporcion_muestral1) / n1) + (proporcion_muestral2 * (1 - proporcion_muestral2) / n2))
diferencia_proporciones = proporcion_muestral1 - proporcion_muestral2
ic_inferior = diferencia_proporciones - margen_error
ic_superior = diferencia_proporciones + margen_error
ic_inferior
ic_superior
# Datos
n1 = 20
n2 = 30
varianza_muestral1 = 25
varianza_muestral2 = 36
nivel_confianza = 0.95
# Valores F para 95% de confianza
f_inferior = qf((1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
f_superior = qf(1 - (1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
# Intervalo de confianza
ic_inferior = (varianza_muestral1 / varianza_muestral2) / f_superior
ic_superior = (varianza_muestral1 / varianza_muestral2) * f_inferior
ic_inferior
ic_superior
# Datos
error_maximo = 2
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Tamaño muestral
n = (valor_z * desviacion_estandar_poblacional / error_maximo)^2
n = ceiling(n)  # Redondear al número entero más cercano
n
knitr::opts_chunk$set(echo = TRUE)
# Datos
n = 50
media_muestral = 85
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * (desviacion_estandar_poblacional / sqrt(n))
ic_inferior = media_muestral - margen_error
ic_superior = media_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 500
proporcion_muestral = 200 / 500
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral * (1 - proporcion_muestral)) / n)
ic_inferior = proporcion_muestral - margen_error
ic_superior = proporcion_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 20
varianza_muestral = 25
nivel_confianza = 0.95
# Valores chi-cuadrado para 95% de confianza
chi2_inferior = qchisq((1 - nivel_confianza) / 2, df = n - 1)
chi2_superior = qchisq(1 - (1 - nivel_confianza) / 2, df = n - 1)
# Intervalo de confianza
ic_inferior = (n - 1) * varianza_muestral / chi2_superior
ic_superior = (n - 1) * varianza_muestral / chi2_inferior
ic_inferior
ic_superior
# Datos
n1 = 30
n2 = 40
media_muestral1 = 85
media_muestral2 = 80
desviacion_estandar_poblacional1 = 10
desviacion_estandar_poblacional2 = 15
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((desviacion_estandar_poblacional1^2 / n1) + (desviacion_estandar_poblacional2^2 / n2))
diferencia_medias = media_muestral1 - media_muestral2
ic_inferior = diferencia_medias - margen_error
ic_superior = diferencia_medias + margen_error
ic_inferior
ic_superior
# Datos
n1 = 300
n2 = 400
proporcion_muestral1 = 120 / 300
proporcion_muestral2 = 150 / 400
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral1 * (1 - proporcion_muestral1) / n1) + (proporcion_muestral2 * (1 - proporcion_muestral2) / n2))
diferencia_proporciones = proporcion_muestral1 - proporcion_muestral2
ic_inferior = diferencia_proporciones - margen_error
ic_superior = diferencia_proporciones + margen_error
ic_inferior
ic_superior
# Datos
n1 = 20
n2 = 30
varianza_muestral1 = 25
varianza_muestral2 = 36
nivel_confianza = 0.95
# Valores F para 95% de confianza
f_inferior = qf((1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
f_superior = qf(1 - (1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
# Intervalo de confianza
ic_inferior = (varianza_muestral1 / varianza_muestral2) / f_superior
ic_superior = (varianza_muestral1 / varianza_muestral2) * f_inferior
ic_inferior
ic_superior
# Datos
error_maximo = 2
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Tamaño muestral
n = (valor_z * desviacion_estandar_poblacional / error_maximo)^2
n = ceiling(n)  # Redondear al número entero más cercano
n
knitr::opts_chunk$set(echo = TRUE)
# Datos
n = 50
media_muestral = 85
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * (desviacion_estandar_poblacional / sqrt(n))
ic_inferior = media_muestral - margen_error
ic_superior = media_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 500
proporcion_muestral = 200 / 500
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral * (1 - proporcion_muestral)) / n)
ic_inferior = proporcion_muestral - margen_error
ic_superior = proporcion_muestral + margen_error
ic_inferior
ic_superior
# Datos
n = 20
varianza_muestral = 25
nivel_confianza = 0.95
# Valores chi-cuadrado para 95% de confianza
chi2_inferior = qchisq((1 - nivel_confianza) / 2, df = n - 1)
chi2_superior = qchisq(1 - (1 - nivel_confianza) / 2, df = n - 1)
# Intervalo de confianza
ic_inferior = (n - 1) * varianza_muestral / chi2_superior
ic_superior = (n - 1) * varianza_muestral / chi2_inferior
ic_inferior
ic_superior
# Datos
n1 = 30
n2 = 40
media_muestral1 = 85
media_muestral2 = 80
desviacion_estandar_poblacional1 = 10
desviacion_estandar_poblacional2 = 15
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((desviacion_estandar_poblacional1^2 / n1) + (desviacion_estandar_poblacional2^2 / n2))
diferencia_medias = media_muestral1 - media_muestral2
ic_inferior = diferencia_medias - margen_error
ic_superior = diferencia_medias + margen_error
ic_inferior
ic_superior
# Datos
n1 = 300
n2 = 400
proporcion_muestral1 = 120 / 300
proporcion_muestral2 = 150 / 400
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Intervalo de confianza
margen_error = valor_z * sqrt((proporcion_muestral1 * (1 - proporcion_muestral1) / n1) + (proporcion_muestral2 * (1 - proporcion_muestral2) / n2))
diferencia_proporciones = proporcion_muestral1 - proporcion_muestral2
ic_inferior = diferencia_proporciones - margen_error
ic_superior = diferencia_proporciones + margen_error
ic_inferior
ic_superior
# Datos
n1 = 20
n2 = 30
varianza_muestral1 = 25
varianza_muestral2 = 36
nivel_confianza = 0.95
# Valores F para 95% de confianza
f_inferior = qf((1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
f_superior = qf(1 - (1 - nivel_confianza) / 2, df1 = n1 - 1, df2 = n2 - 1)
# Intervalo de confianza
ic_inferior = (varianza_muestral1 / varianza_muestral2) / f_superior
ic_superior = (varianza_muestral1 / varianza_muestral2) * f_inferior
ic_inferior
ic_superior
# Datos
error_maximo = 2
desviacion_estandar_poblacional = 10
nivel_confianza = 0.95
# Valor Z para 95% de confianza
valor_z = qnorm(1 - (1 - nivel_confianza) / 2)
# Tamaño muestral
n = (valor_z * desviacion_estandar_poblacional / error_maximo)^2
n = ceiling(n)  # Redondear al número entero más cercano
n
